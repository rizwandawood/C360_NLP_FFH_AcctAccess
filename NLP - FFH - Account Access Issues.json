{"paragraphs":[{"text":"%livykeraspy36_1.pyspark\nimport re\nfrom nltk.tokenize import RegexpTokenizer\nfrom nltk.stem import WordNetLemmatizer\nimport gensim\nfrom gensim import corpora, models\nimport logging\nlogging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)\n\n#build this model using FFH model (we stored FFH model data to be used for submodels) where we stored all four months of data used for FFH model building. we can use same 4 months to build thsi model just for troubleshooting topic. topic ID 14 in this case\ndf_memo = spark.sql(\" select customer_id_num as customer_id,call_dt_utc as call_date,memo_txt from cust_intractn.nlp_model_scored_level1_orc where model_id = 90200 and topic1_id = 17 and load_dt > '2020-01-01' \") # where customer_id in(19323350,18777291,96249021)\npdf_callmemo = df_memo.toPandas()\npdf_callmemo.head(10)\n","user":"x212687","dateUpdated":"2020-09-18T10:37:43-0400","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1600439563885_361494028","id":"20190325-152335_2157087","dateCreated":"2020-09-18T10:32:43-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1968"},{"text":"%livykeraspy36_1.pyspark\n#gensim.parsing.preprocessing.STOPWORDS # below list has been initially taken from gensim and then customized it for our own use\nstopWords = ['again', 'itself', 'km', 'was', 'mill', 'because', 'thick', 'seems', 'third', 'where', 'forty', 'around', 'per', 'anything', 'own', 'un', 'now', 'quite', 'else', 'beside', 'well', 'mostly', 'had', 'fill', 'less', 'will', 'about', 'us', 'meanwhile', 'no', 'though', 'i', 'cannot', 'alone', 'themselves', 'they', 'interest', 'except', 'into', 'could', 'on', 'everywhere', 'sometimes', 'afterwards', 'an', 'others', 'latter', 'hence', 'besides', 'would', 'couldnt', 'wherein', 'mine', 'the', 'ten', 'ie', 'somehow', 'out', 'became', 'becoming', 'does', 'due', 'myself', 'elsewhere', 'get', 'then', 'move', 'part', 'behind', 'she', 'nobody', 'whereby', 'beforehand', 'make', 'to', 'eg', 'empty', 'few', 'whereupon', 'keep', 'something', 'whereafter', 'when', 'or', 'whom', 'throughout', 'eight', 'why', 'whose', 'back', 'however', 'thus', 'next', 'anywhere', 'none', 'perhaps', 'say', 'often', 'three', 'whence', 'beyond', 'against', 'another', 'of', 'also', 'below', 'somewhere', 'than', 'namely', 'any', 'might', 'its', 'along', 'being', 'whither', 'sometime', 'bottom', 'various', 'without', 'wherever', 'anyway', 'always', 'our', 'within', 'side', 'after', 'with', 'find', 'among', 'for', 'under', 'at', 'former', 'during', 'thereafter', 'four', 'should', 'formerly', 'have', 'whereas', 'some', 'same', 'serious', 'thereby', 'top', 'via', 'ours', 'has', 'although', 'hereupon', 'first', 'every', 'once', 'just', 'don', 'their', 'amongst', 'both', 'between', 'already', 'hereby', 'did', 'go', 'full', 'never', 'other', 'nine', 'by', 'fifteen', 'onto', 'hundred', 'etc', 'neither', 'towards', 'everything', 'yourselves', 'last', 'across', 'further', 'while', 're', 'thru', 'sixty', 'nor', 'regarding', 'most', 'see', 'done', 'whenever', 'am', 'becomes', 'used', 'even', 'inc', 'give', 'there', 'hers', 'herself', 'two', 'put', 'me', 'toward', 'describe', 'moreover', 'if', 'that', 'but', 'nevertheless', 'over', 'fire', 'you', 'anyhow', 'amount', 'it', 'six', 'himself', 'each', 'nowhere', 'cant', 'until', 'more', 'herein', 'otherwise', 'this', 'indeed', 'above', 'ourselves', 'kg', 'his', 'and', 'up', 'through', 'what', 'show', 'are', 'please', 'together', 'too', 'noone', 'these', 'either', 'your', 'fify', 'de', 'latterly', 'twelve', 'yet', 'only', 'be', 'must', 'a', 'her', 'amoungst', 'detail', 'may', 'since', 'become', 'least', 'which', 'almost', 'upon', 'them', 'whole', 'one', 'been', 'name', 'enough', 'very', 'really', 'my', 'many', 'whoever', 'made', 'everyone', 'yours', 'how', 'doesn', 'using', 'therein', 'in', 'whether', 'take', 'do', 'still', 'seeming', 'we', 'who', 'con', 'co', 'several', 'as', 'he', 'seem', 'didn', 'all', 'eleven', 'twenty', 'here', 'those', 'found', 'him', 'can', 'front', 'someone', 'nothing', 'thence', 'not', 'down', 'hereafter', 'hasnt', 'rather', 'anyone', 'unless', 'five', 'much', 'therefore', 'ltd', 'thin', 'were', 'from', 'such', 'sincere', 'doing', 'yourself', 'before', 'is', 'so', 'thereupon', 'ever', 'seemed', 'whatever']\n\n#below words to be removed based on first run of topic model. purpose is to remove generalized words which appear too many times and spread across all topics\nremoveWords = ['call','calls','called','calling','caller','want','wants','wanted','wanting','customer','cust','cx','verify','verified','verifying','verifies','vrfd','advise','advised','advising','speak','spoke','spoken','client','say','saying','says','said','jan','january','feb','feburary','mar','march','apr','april','may','jun','june','jul','july','aug','august','sep','sept','september','oct','october','nov','november','dec','december','time','date','ask','asked','asks','asking','service','sun','sunday','mon','monday','tue','tuesday','wed','wednesday','thur','thursday','fri','friday','sat','saturday','get','gets','getting','look','looks','looking','go','goes','going','check','checks','checking','day','days','request','requests','requesting','talk','talks','talked','need','needs','needing','know','knows','wi','telus','fifa','pin','email','account','email','emails','issue','issues','work','working','works','worked']\n\nremoveall = stopWords + removeWords\n","user":"x212687","dateUpdated":"2020-09-22T14:08:56-0400","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<hr/>Spark Application Id: application_1553541408014_0020<br/>Spark WebUI: <a href=\"http://qcr-hadoop-m005.oss.ads:8088/proxy/application_1553541408014_0020/\">http://qcr-hadoop-m005.oss.ads:8088/proxy/application_1553541408014_0020/</a>"}]},"apps":[],"jobName":"paragraph_1600439563902_2141541648","id":"20190325-153708_1262011938","dateCreated":"2020-09-18T10:32:43-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1969"},{"text":"%livykeraspy36_1.pyspark\n\ntranslate={'fibre': 'fiber', 'fi' : 'wifi', 'box' : 'stb' , 'boxes' : 'stb' , 'tech' : 'technician', 'apt' : 'appointment', 'appt' : 'appointment', 'appts' : 'appointment', 'apts' : 'appointment'\n    , 'rebook' : 'reschedule', 'rebooked' : 'reschedule', 'upsell' : 'upgrade', 'crave' : 'cravetv', 'unli' : 'unlimited','cease' : 'cancel','ceased' : 'cancel','cancellation' : 'cancel', 'disc' : 'discount', 'book' : 'schedule', 'booked' : 'schedule', 'month' : 'month', 'months' : 'month', 'mnths' : 'month', 'mths' : 'month', 'mo' : 'month', 'mos' : 'month', 'mon' : 'month', 'yr' : 'year', 'years' : 'year',  'vods' : 'vod',  'reso' : 'resolution','resolved' : 'resolution','resolving' : 'resolution','instal' : 'install','instalation' : 'install','installed' : 'install','installing' : 'install'}\n\ndef tr(txt):\n    if translate.get(txt) == None:\n        return txt\n    else:\n        return translate.get(txt)\n\ndocuments = pdf_callmemo.memo_txt\n\n#below process convert actual text to tokens and remove stops words and do lemitization for lda model    \ncleaned_notes=[]\nfor line in documents:\n    a = line.rstrip() #remove spaces at the end\n    a = a.lower() #convert to lower case\n    result = re.sub('[^a-zA-Z]', ' ', a) #convert all no alpha char to empty character\n    result = result.split()  #creates a list of words\n    allrem = [word for word in result if word not in removeall] #remove stop words\n    singlecharrem = [word for word in allrem if len(word)>1] #remove any words with one character\n    replace_notes = [tr(word)  for word in singlecharrem ]\n    cleaned_notes.append(replace_notes)\n\n# Doing Lemmatization for Verbs\nlemmaed_texts_v = []\nwnl = WordNetLemmatizer()\n\nfor item in cleaned_notes:\n    lemmaed_tokens = [wnl.lemmatize(i, pos='v') for i in item]\n    # add tokens to list\n    lemmaed_texts_v.append(lemmaed_tokens)\n\n# Doing Lemmatization for Nouns\ncleaned_text = []\nfor item in lemmaed_texts_v:\n    lemmaed_tokens = [wnl.lemmatize(i, pos='n') for i in item]\n    # add tokens to list\n    cleaned_text.append(lemmaed_tokens)\n\n","user":"x212687","dateUpdated":"2020-09-18T10:32:43-0400","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<hr/>Spark Application Id: application_1553541408014_0020<br/>Spark WebUI: <a href=\"http://qcr-hadoop-m005.oss.ads:8088/proxy/application_1553541408014_0020/\">http://qcr-hadoop-m005.oss.ads:8088/proxy/application_1553541408014_0020/</a>"}]},"apps":[],"jobName":"paragraph_1600439563918_-1679904233","id":"20190325-155326_1846822015","dateCreated":"2020-09-18T10:32:43-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1970"},{"text":"%livykeraspy36_1.pyspark\n# Testing Gensim\ndictionary = corpora.Dictionary(cleaned_text)\n# Converting list of documents (corpus) into Document Term Matrix or Bag of words using dictionary prepared above.\ndoc_term_matrix = [dictionary.doc2bow(doc) for doc in cleaned_text]\n\n# generate LDA model\n#coherence score \nlda_model = models.LdaMulticore(doc_term_matrix, num_topics=10, workers=8, id2word = dictionary, passes=15)\n\nfrom gensim.utils import simple_preprocess\nfrom gensim.models import CoherenceModel\n# Compute Coherence Score. this will help to decide how many topics make sense. model with more score will decide how many topics\ncoherence_model_lda = CoherenceModel(model=lda_model, texts=cleaned_text, dictionary=dictionary, coherence='c_v')\ncoherence_lda = coherence_model_lda.get_coherence()\nprint('\\nCoherence Score: ', coherence_lda)\n\nimport pyLDAvis\nimport pyLDAvis.gensim  # don't skip this\n# Visualize the topics\nvis = pyLDAvis.gensim.prepare(lda_model, doc_term_matrix, dictionary , sort_topics=False) # sort false to make sure we get same order of topics as per LDA model otherwise it generate topic ID based on relevance \npyLDAvis.save_html(vis, '/home/x212687/workspace/NLP_FFH/Account Access/Account_access.html')\n","user":"x212687","dateUpdated":"2020-09-22T14:09:39-0400","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1600439563933_-393704725","id":"20190325-155456_1737397273","dateCreated":"2020-09-18T10:32:43-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1971"},{"text":"%livykeraspy36_1.pyspark\nfor idx, topic in lda_model.print_topics(-1):\n    print('Topic: {} \\nWords: {}'.format(idx, topic))\n","user":"x212687","dateUpdated":"2020-09-18T10:32:43-0400","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1600439563947_486007671","id":"20190325-161425_1625373580","dateCreated":"2020-09-18T10:32:43-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1972"},{"text":"%livykeraspy36_1.pyspark\n","user":"x212687","dateUpdated":"2020-09-18T10:32:43-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1600439563961_-1722066734","id":"20190510-102607_1884671494","dateCreated":"2020-09-18T10:32:43-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1973"},{"text":"%livykeraspy36_1.pyspark\nlda_model.save('/home/x212687/workspace/NLP_FFH/Account Access/FFH_accountaccess.model')\ndictionary.save('/home/x212687/workspace/NLP_FFH/Account Access/FFH_accountaccess.dictionary')\n","user":"x212687","dateUpdated":"2020-09-18T11:00:09-0400","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1600439563975_-1837740714","id":"20190325-155918_1950848466","dateCreated":"2020-09-18T10:32:43-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1974"},{"text":"%livykeraspy36_1.pyspark\n# Applying the LDA Model on input dataset \ndoc_lda = lda_model[doc_term_matrix]\n\n# Creating the Array where to store the scoring result\nn = documents.shape[0]   # number of Documents to score\nm = 7   # Number of Columns in the list variable to store value for Memo ID, 3 Topic IDs, 3 Topic Coverage\n\ndoc_topics = [[-1] * m for i in range(n)]\n# -1 is the default value. -1 means no topic is been scored\n\ni=0\nfor item in doc_lda:\n    item.sort(key=lambda elem: elem[1], reverse=True)\n    doc_topics[i][0] = i\n    if len(item)>0: \n        doc_topics[i][1] = item[0][0]\n        doc_topics[i][2] = item[0][1]\n    else:\n        doc_topics[i][2] = 0\n    if len(item)>1: \n        doc_topics[i][3] = item[1][0]\n        doc_topics[i][4] = item[1][1]\n    else: \n        doc_topics[i][4] = 0\n    if len(item)>2: \n        doc_topics[i][5] = item[2][0]\n        doc_topics[i][6] = item[2][1]\n    else:\n        doc_topics[i][6] = 0\n    i+=1\n\n\n##  ### Joining the scoring data with original call Memo data\nimport numpy as np\nimport pandas as pd\n\n# Converting to a Dataframe object\ndf_topic_score = pd.DataFrame(doc_topics, columns = [\"Memo_ID\", \"Topic1_ID\", \"Topic1_Coverage\", \"Topic2_ID\", \"Topic2_Coverage\", \"Topic3_ID\", \"Topic3_Coverage\"])\n\n## resetting the index\n#df_memo = pdf_callmemo_joined.reset_index(drop=True)\n\n## Joining(Horizontal Concatenation) memo data and scoring data together\n\ndf_memo_topic_score = pd.concat([pdf_callmemo, df_topic_score], axis=1)\n\ndf_memo_topic_score['call_date'] = df_memo_topic_score['call_date'].apply(lambda x: x.strftime('%Y-%m-%d')) \n\n#create spark dataframe\ndf1 = spark.createDataFrame(df_memo_topic_score)\n#df1.show(10,50)\ndf1.createOrReplaceTempView(\"df1\")\n\nspark.sql(\"drop table if exists workspace_x212687.ffh_acctaccess_score\")\nsql_query = spark.sql(\"\"\"create table workspace_x212687.ffh_acctaccess_score(customer_id int,call_date Date,memo_txt varchar(2000),memo_id int, topic1_id int,topic1_coverage decimal(9,4),topic2_id int,topic2_coverage decimal(9,4),topic3_id int,topic3_coverage decimal(9,4) )\"\"\").show()\n\nspark.sql(\"\"\" insert into workspace_x212687.ffh_acctaccess_score select * from df1 \"\"\").show()\n","user":"x212687","dateUpdated":"2020-09-23T11:14:48-0400","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1600439563989_-1698381597","id":"20190325-160238_574558757","dateCreated":"2020-09-18T10:32:43-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1975"},{"text":"%livykeraspy36.sql\nselect topic1_id,count(customer_id) from workspace_x212687.ffh_acctaccess_score group by topic1_id","user":"x212687","dateUpdated":"2020-09-23T11:29:04-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{"columns":[{"name":"topic1_id","visible":true,"width":"*","sort":{"priority":0,"direction":"asc"},"filters":[{}],"pinned":""},{"name":"count(customer_id)","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"topic1_id":"string","count(customer_id)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"topic1_id\tcount(customer_id)\n1\t7308\n6\t16569\n3\t6922\n5\t19644\n9\t14168\n4\t5412\n8\t17016\n7\t7718\n2\t12336\n0\t6499"},{"type":"HTML","data":"<hr/>Spark Application Id: application_1600537840013_30155<br/>Spark WebUI: <a href=\"http://qcr-hadoop-m003.oss.ads:8088/proxy/application_1600537840013_30155/\">http://qcr-hadoop-m003.oss.ads:8088/proxy/application_1600537840013_30155/</a>"}]},"apps":[],"jobName":"paragraph_1600439564003_2048892183","id":"20190416-120335_1689175640","dateCreated":"2020-09-18T10:32:44-0400","dateStarted":"2020-09-23T11:29:04-0400","dateFinished":"2020-09-23T11:30:21-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1976"},{"text":"%livykeraspy36.sql\nselect customer_id,topic1_id,topic1_coverage,memo_txt from workspace_x212687.ffh_troubleshooting_model_score limit 10","user":"x212687","dateUpdated":"2020-09-18T10:32:44-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"customer_id":"string","topic1_id":"string","topic1_coverage":"string","memo_txt":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"customer_id\ttopic1_id\ttopic1_coverage\tmemo_txt\n150\t3\t0.4672\t***S2.0***colton ...\n758\t3\t0.3504\tSTN: 7808147373CB...\n779\t1\t0.6981\tNo Sync Outage de...\n789\t5\t0.8541\t**Service2.0***TO...\n821\t7\t0.3997\tLarry called in r...\n860\t2\t0.6034\ts2.0--- skeleton ...\n894\t7\t0.4448\t*** SERVICE 2.0 *...\n1748\t4\t0.6877\tCALLER: Lyette Ac...\n1967\t7\t0.4234\t**Service 2.0** S...\n2049\t5\t0.5379\t**service 2.0**sp..."},{"type":"HTML","data":"<hr/>Spark Application Id: application_1554137552035_12072<br/>Spark WebUI: <a href=\"http://qcr-hadoop-m005.oss.ads:8088/proxy/application_1554137552035_12072/\">http://qcr-hadoop-m005.oss.ads:8088/proxy/application_1554137552035_12072/</a>"}]},"apps":[],"jobName":"paragraph_1600439564018_-1124965635","id":"20190325-112903_79313490","dateCreated":"2020-09-18T10:32:44-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1977"},{"text":"%livykeraspy36.sql\nselect case when b.customer_id is null then 'copper' else 'fiber' end as copperfiber , topic1_id,count(a.customer_id) \nfrom workspace_x212687.ffh_troubleshooting_model_score a\nleft outer join workspace_x212687.fiber b on(a.customer_id = b.customer_id)\ngroup by case when b.customer_id is null then 'copper' else 'fiber' end,topic1_id","user":"x212687","dateUpdated":"2020-09-18T10:32:44-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{"columns":[{"name":"topic1_id","visible":true,"width":"*","sort":{"priority":0,"direction":"asc"},"filters":[{}],"pinned":""},{"name":"count(customer_id)","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"copperfiber":"string","topic1_id":"string","count(customer_id)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[],"groups":[],"values":[]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Job is cancelled"}]},"apps":[],"jobName":"paragraph_1600439564031_-709450510","id":"20190325-112922_642510452","dateCreated":"2020-09-18T10:32:44-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1978"},{"text":"%livykeraspy36.sql\n","user":"x212687","dateUpdated":"2020-09-18T10:32:44-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1600439564046_2103373264","id":"20190409-112206_165741480","dateCreated":"2020-09-18T10:32:44-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1979"}],"name":"workspace_x212687/Call Center/NLP - FFH - Account Access Issues","id":"2FKZDVQWP","noteParams":{},"noteForms":{},"angularObjects":{"livykeraspy36::2FKZDVQWP":[],"md:shared_process":[],"livykeraspy36_1::2FKZDVQWP":[]},"config":{"isZeppelinNotebookCronEnable":true,"looknfeel":"default","personalizedMode":"false"},"info":{}}